
#include<stdio.h>
#include<stdlib.h>
 struct Node{
    struct Node *prev;
    int data; 
    struct Node *next;
};
struct Node* head = NULL;
struct Node* createNode(int ele){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode -> data = ele;
    newNode -> next = NULL;
    newNode -> prev = NULL;
    return newNode;
}
void insertnodeinbeg(int ele){
    struct Node* newNode = createNode(ele);
    if(head == NULL){
        head = newNode;
    }
    else{
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
    printf("Node Inserted !!!\n");
}
void insertnodeinend(int ele){
    struct Node* newNode = createNode(ele);
    if(head == NULL){
        head=newNode;
    }
    else{
        struct Node* temp =head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next=newNode;
        newNode->prev = temp;
        printf("NODE INSERTED!!\n");
    }
}
void insertatanypos(int ele, int pos){
if(head==NULL){
    printf("List is empty\n");
}
else if(pos==1){
    insertnodeinbeg(ele);
}
else{
    struct Node* newNode = createNode(ele);
    struct Node* temp = head;
    int i=1;
    while(i<pos-1 && temp != NULL){
        i++;
        temp = temp->next;
    }
    if(temp != NULL){
        newNode-> prev = temp->prev;
        temp->prev->next = newNode;
        newNode->next = temp;
        temp->prev = newNode;
        printf("Node Inserted at position %d\n", pos);
    }
    else{
        printf("Invalid position\n");
        }
    }
}
void deletenodefeombeg(){
    if(head==NULL){
        printf("List is empty\n");
    }
    else{
        struct Node* temp = head;
        head = head->next;
        head->prev = NULL;
        free(temp);
        printf("Node Deleted\n");
    }
}
void deletenodefromend(){
    if(head==NULL){
        printf("List is empty\n");
    }
    else{
        struct Node* temp = head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        struct Node* t = temp;
        if(temp -> prev!=NULL)
        temp->prev->next = NULL;
        else
            head = NULL;
        free(t);
        printf("Node Deleted\n");
    }
}
void deletenodefromanypos(int pos){
    if(head==NULL){
        printf("List is empty\n");
    }
    else if(pos==1){
        deletenodefeombeg();
    }
    else{
        struct Node* temp = head;
        int i=1;
        while(i != pos && temp != NULL){
            i++;
            temp = temp->next;
        }
        if(temp != NULL){
            temp->prev->next = temp->next;
            if(temp->next != NULL)
                temp->next->prev = temp->prev;
            free(temp);
            printf("Node Deleted\n");
        }
        else{
            printf("Position not found\n");
        }   
    }
}

void search(int ele){
    if(head == NULL)
        printf("List is Empty !!!\n");
    else{
       struct Node* temp = head;
        while(temp != NULL)
        {
            if(temp->data == ele){
                printf("Element found\n");
                return;
            }
            temp = temp->next;
        }
        printf("Element not found !!!\n");
    }
}

void Display(){
    if(head == NULL)
        printf("List is Empty !!!\n");
    else{
      struct   Node* temp = head;
        while(temp != NULL)
        {
            printf("%d ",temp-> data);
            temp = temp->next;
        }
    
    }
}
  
int main(){
    while (1){
        printf("---------Doubly Linked List----------\n");
        printf("1. Inset node  in begining\n");
        printf("2. Inset node  at end\n");
        printf("3. Inset node  at any position\n");
        printf("4. Delete node from begining\n");
        printf("5. Delete node from end\n");
        printf("6. Delete node from any position\n");
        printf("7. Search element in list\n");
        printf("8.Display list\n");
        printf("9.Exit\n");
        
        int choice, data, priority;
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch (choice){
            case 1:
                printf("Enter Value : ");
                scanf("%d",&data);
                insertnodeinbeg(data);
                break;
            case 2:
                printf("Enter Value : ");
                scanf("%d",&data);
                insertnodeinend(data);
                break;
            case 3:
                printf("Enter Value : ");
                scanf("%d",&data);
                printf("Enter position: ");
                scanf("%d",&priority);
                insertatanypos(data,priority);
            break;
            case 4:
                deletenodefeombeg();
            break;
            case 5:
                deletenodefromend();
            break;
            case 6:
                printf("Enter position: ");
                scanf("%d",&priority);
                deletenodefromanypos(priority);
            break;
            case 7:
                printf("Enter Value : ");
                scanf("%d",&data);
                search(data);
            break;
            case 8:
                printf("List is : ");
                Display();
            break;
            case 9:
                exit(0);
            default:
            printf("Invalid Choice !!!\n");
        }
        printf("\n");
    }
    return 0;
}
